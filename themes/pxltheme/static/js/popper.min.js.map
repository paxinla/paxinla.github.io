{"version":3,"file":"popper.js.map","sources":["../src/popper/utils/isNative.js","../src/popper/utils/debounce.js","../src/popper/utils/isNumeric.js","../src/popper/utils/setStyles.js","../src/popper/utils/isFunction.js","../src/popper/utils/getStyleComputedProperty.js","../src/popper/utils/getParentNode.js","../src/popper/utils/getScrollParent.js","../src/popper/utils/isOffsetContainer.js","../src/popper/utils/getRoot.js","../src/popper/utils/getOffsetParent.js","../src/popper/utils/findCommonOffsetParent.js","../src/popper/utils/getScroll.js","../src/popper/utils/includeScroll.js","../src/popper/utils/getBordersSize.js","../src/popper/utils/isIE10.js","../src/popper/utils/getWindowSizes.js","../src/popper/utils/getClientRect.js","../src/popper/utils/getBoundingClientRect.js","../src/popper/utils/getOffsetRectRelativeToArbitraryNode.js","../src/popper/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","../src/popper/utils/isFixed.js","../src/popper/utils/getBoundaries.js","../src/popper/utils/computeAutoPlacement.js","../src/popper/utils/getReferenceOffsets.js","../src/popper/utils/getOuterSizes.js","../src/popper/utils/getOppositePlacement.js","../src/popper/utils/getPopperOffsets.js","../src/popper/utils/find.js","../src/popper/utils/findIndex.js","../src/popper/utils/runModifiers.js","../src/popper/methods/update.js","../src/popper/utils/isModifierEnabled.js","../src/popper/utils/getSupportedPropertyName.js","../src/popper/methods/destroy.js","../src/popper/utils/setupEventListeners.js","../src/popper/methods/enableEventListeners.js","../src/popper/utils/removeEventListeners.js","../src/popper/methods/disableEventListeners.js","../src/popper/utils/setAttributes.js","../src/popper/modifiers/applyStyle.js","../src/popper/modifiers/computeStyle.js","../src/popper/utils/isModifierRequired.js","../src/popper/modifiers/arrow.js","../src/popper/utils/getOppositeVariation.js","../src/popper/methods/placements.js","../src/popper/utils/clockwise.js","../src/popper/modifiers/flip.js","../src/popper/modifiers/keepTogether.js","../src/popper/modifiers/offset.js","../src/popper/modifiers/preventOverflow.js","../src/popper/modifiers/shift.js","../src/popper/modifiers/hide.js","../src/popper/modifiers/inner.js","../src/popper/modifiers/index.js","../src/popper/methods/defaults.js","../src/popper/index.js"],"sourcesContent":["const nativeHints = [\n  'native code',\n  '[object MutationObserverConstructor]', // for mobile safari iOS 9.0\n];\n\n/**\n * Determine if a function is implemented natively (as opposed to a polyfill).\n * @method\n * @memberof Popper.Utils\n * @argument {Function | undefined} fn the function to check\n * @returns {Boolean}\n */\nexport default fn =>\n  nativeHints.some(hint => (fn || '').toString().indexOf(hint) > -1);\n","import isNative from './isNative';\n\nconst isBrowser = typeof window !== 'undefined';\nconst longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\nlet timeoutDuration = 0;\nfor (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n  if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n    timeoutDuration = 1;\n    break;\n  }\n}\n\nexport function microtaskDebounce(fn) {\n  let scheduled = false;\n  let i = 0;\n  const elem = document.createElement('span');\n\n  // MutationObserver provides a mechanism for scheduling microtasks, which\n  // are scheduled *before* the next task. This gives us a way to debounce\n  // a function but ensure it's called *before* the next paint.\n  const observer = new MutationObserver(() => {\n    fn();\n    scheduled = false;\n  });\n\n  observer.observe(elem, { attributes: true });\n\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      elem.setAttribute('x-index', i);\n      i = i + 1; // don't use compund (+=) because it doesn't get optimized in V8\n    }\n  };\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\n// It's common for MutationObserver polyfills to be seen in the wild, however\n// these rely on Mutation Events which only occur when an element is connected\n// to the DOM. The algorithm used in this module does not use a connected element,\n// and so we must ensure that a *native* MutationObserver is available.\nconst supportsNativeMutationObserver =\n  isBrowser && isNative(window.MutationObserver);\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsNativeMutationObserver\n  ? microtaskDebounce\n  : taskDebounce);\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (\n    !element ||\n    ['HTML', 'BODY', '#document'].indexOf(element.nodeName) !== -1\n  ) {\n    return window.document.body;\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","export default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || element.firstElementChild.offsetParent === element\n  );\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  // NOTE: 1 DOM access here\n  const offsetParent = element && element.offsetParent;\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return window.document.documentElement;\n  }\n\n  return offsetParent;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return window.document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = window.document.documentElement;\n    const scrollingElement = window.document.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    +styles[`border${sideA}Width`].split('px')[0] +\n    +styles[`border${sideB}Width`].split('px')[0]\n  );\n}\n","/**\n * Tells if you are running Internet Explorer 10\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean} isIE10\n */\nlet isIE10 = undefined;\n\nexport default function() {\n  if (isIE10 === undefined) {\n    isIE10 = navigator.appVersion.indexOf('MSIE 10') !== -1;\n  }\n  return isIE10;\n}\n","import isIE10 from './isIE10';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    isIE10()\n      ? html[`offset${axis}`] +\n          computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`] +\n          computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]\n      : 0\n  );\n}\n\nexport default function getWindowSizes() {\n  const body = window.document.body;\n  const html = window.document.documentElement;\n  const computedStyle = isIE10() && window.getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE10 from './isIE10';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  if (isIE10()) {\n    try {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    } catch (err) {}\n  } else {\n    rect = element.getBoundingClientRect();\n  }\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes() : {};\n  const width =\n    sizes.width || element.clientWidth || result.right - result.left;\n  const height =\n    sizes.height || element.clientHeight || result.bottom - result.top;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE10 from './isIE10';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent) {\n  const isIE10 = runIsIE10();\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top,\n    left: childrenRect.left - parentRect.left,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (isHTML || parent.nodeName === 'BODY') {\n    const styles = getStyleComputedProperty(parent);\n    const borderTopWidth = isIE10 && isHTML\n      ? 0\n      : +styles.borderTopWidth.split('px')[0];\n    const borderLeftWidth = isIE10 && isHTML\n      ? 0\n      : +styles.borderLeftWidth.split('px')[0];\n    const marginTop = isIE10 && isHTML ? 0 : +styles.marginTop.split('px')[0];\n    const marginLeft = isIE10 && isHTML ? 0 : +styles.marginLeft.split('px')[0];\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element) {\n  const html = window.document.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = getScroll(html);\n  const scrollLeft = getScroll(html, 'left');\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  return isFixed(getParentNode(element));\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement\n) {\n  // NOTE: 1 DOM access here\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = findCommonOffsetParent(popper, reference);\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport') {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent);\n  } else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(popper));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = window.document.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = window.document.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes();\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  boundaries.left += padding;\n  boundaries.top += padding;\n  boundaries.right -= padding;\n  boundaries.bottom -= padding;\n\n  return boundaries;\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference) {\n  const commonOffsetParent = findCommonOffsetParent(popper, reference);\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop) + parseFloat(styles.marginBottom);\n  const y = parseFloat(styles.marginLeft) + parseFloat(styles.marginRight);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier.function) {\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier.function || modifier.fn;\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n  data.offsets.popper.position = 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'webkit', 'moz', 'o'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length - 1; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof window.document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroy the popper\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.left = '';\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicity asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","import getScrollParent from './getScrollParent';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? window : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  window.addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  window.removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger onUpdate callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    window.cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if the arrow style has been computed, apply the arrow style\n  if (data.offsets.arrow) {\n    setStyles(data.arrowElement, data.offsets.arrow);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper.\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n  return options;\n}\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration = legacyGpuAccelerationOption !== undefined\n    ? legacyGpuAccelerationOption\n    : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  // round sides to avoid blurry text\n  const offsets = {\n    left: Math.round(popper.left),\n    top: Math.round(popper.top),\n    bottom: Math.round(popper.bottom),\n    right: Math.round(popper.right),\n  };\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    top = -offsetParentRect.height + offsets.bottom;\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    left = -offsetParentRect.width + offsets.right;\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update attributes and styles of `data`\n  data.attributes = attributes;\n  data.styles = { ...styles, ...data.styles };\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const side = isVertical ? 'top' : 'left';\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its reference have enough pixels in conjuction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  let sideValue = center - getClientRect(data.offsets.popper)[side];\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {};\n  data.offsets.arrow[side] = Math.floor(sideValue);\n  data.offsets.arrow[altSide] = ''; // make sure to unset any eventual altSide value from the DOM node\n\n  return data;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","/**\n * List of accepted placements to use as values of the `placement` option.<br />\n * Valid placements are:\n * - `auto`\n * - `top`\n * - `right`\n * - `bottom`\n * - `left`\n *\n * Each placement can have a variation from this list:\n * - `-start`\n * - `-end`\n *\n * Variations are interpreted easily if you think of them as the left to right\n * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`\n * is right.<br />\n * Vertically (`left` and `right`), `start` is top and `end` is bottom.\n *\n * Some valid examples are:\n * - `top-end` (on top of reference, right aligned)\n * - `right-start` (on right of reference, top aligned)\n * - `bottom` (on bottom, centered)\n * - `auto-right` (on the side with more space available, alignment depends by placement)\n *\n * @static\n * @type {Array}\n * @enum {String}\n * @readonly\n * @method placements\n * @memberof Popper\n */\nexport default [\n  'auto-start',\n  'auto',\n  'auto-end',\n  'top-start',\n  'top',\n  'top-end',\n  'right-start',\n  'right',\n  'right-end',\n  'bottom-end',\n  'bottom',\n  'bottom-start',\n  'left-end',\n  'left',\n  'left-start',\n];\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n    const flippedVariation =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement\n  );\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side = ['left', 'top'].indexOf(placement) !== -1\n      ? 'primary'\n      : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[placement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unitless, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the height.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * An scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper this makes sure the popper has always a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier, can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near eachothers\n   * without leaving any gap between the two. Expecially useful when the arrow is\n   * enabled and you want to assure it to point to its reference element.\n   * It cares only about the first axis, you can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjuction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations).\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position,\n     * the popper will never be placed outside of the defined boundaries\n     * (except if keepTogether is enabled)\n     */\n    boundariesElement: 'viewport',\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Just disable this modifier and define you own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3d transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties.\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the informations used by Popper.js\n * this object get passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper.\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper, it expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements.\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overriden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass as 3rd argument an object with the same\n * structure of this object, example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Whether events (resize, scroll) are initially enabled\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated, this callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","// Utils\nimport debounce from './utils/debounce';\nimport setStyles from './utils/setStyles';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Create a new Popper.js instance\n   * @class Popper\n   * @param {HTMLElement|referenceObject} reference - The reference element used to position the popper\n   * @param {HTMLElement} popper - The HTML element used as popper.\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference.jquery ? reference[0] : reference;\n    this.popper = popper.jquery ? popper[0] : popper;\n\n    // make sure to apply the popper position before any computation\n    setStyles(this.popper, { position: 'absolute' });\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedule an update, it will run on the next UI update available\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n"],"names":["nativeHints","fn","some","hint","toString","indexOf","isBrowser","window","longerTimeoutBrowsers","timeoutDuration","i","length","navigator","userAgent","microtaskDebounce","scheduled","elem","document","createElement","observer","MutationObserver","observe","attributes","setAttribute","taskDebounce","supportsNativeMutationObserver","isNative","isNumeric","n","isNaN","parseFloat","isFinite","setStyles","element","styles","keys","forEach","prop","unit","style","isFunction","functionToCheck","getType","call","getStyleComputedProperty","property","nodeType","css","getComputedStyle","getParentNode","nodeName","parentNode","host","getScrollParent","body","overflow","overflowX","overflowY","test","isOffsetContainer","firstElementChild","offsetParent","getRoot","node","getOffsetParent","documentElement","findCommonOffsetParent","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","element1root","getScroll","side","upperSide","html","scrollingElement","includeScroll","rect","subtract","scrollTop","scrollLeft","modifier","top","bottom","left","right","getBordersSize","axis","sideA","sideB","split","isIE10","undefined","appVersion","getSize","computedStyle","Math","max","getWindowSizes","getClientRect","offsets","width","height","getBoundingClientRect","err","result","sizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getOffsetRectRelativeToArbitraryNode","children","parent","runIsIE10","isHTML","childrenRect","parentRect","scrollParent","marginTop","marginLeft","borderTopWidth","borderLeftWidth","getViewportOffsetRectRelativeToArtbitraryNode","relativeOffset","innerWidth","innerHeight","offset","isFixed","getBoundaries","popper","reference","padding","boundariesElement","boundaries","boundariesNode","getArea","computeAutoPlacement","placement","refRect","rects","sortedAreas","Object","map","key","sort","a","b","area","filteredAreas","filter","computedPlacement","variation","getReferenceOffsets","state","commonOffsetParent","getOuterSizes","x","marginBottom","y","marginRight","getOppositePlacement","hash","replace","matched","getPopperOffsets","referenceOffsets","popperRect","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","find","arr","check","Array","prototype","findIndex","value","cur","match","obj","runModifiers","modifiers","data","ends","modifiersToRun","slice","function","warn","enabled","update","isDestroyed","options","flip","originalPlacement","position","isCreated","onCreate","onUpdate","isModifierEnabled","modifierName","name","getSupportedPropertyName","prefixes","upperProp","charAt","toUpperCase","prefix","toCheck","destroy","removeAttribute","disableEventListeners","removeOnDestroy","removeChild","attachToScrollParents","event","callback","scrollParents","isBody","target","addEventListener","passive","push","setupEventListeners","updateBound","scrollElement","eventsEnabled","enableEventListeners","scheduleUpdate","removeEventListeners","removeEventListener","cancelAnimationFrame","setAttributes","applyStyle","instance","arrow","arrowElement","applyStyleOnLoad","modifierOptions","computeStyle","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","round","prefixedProperty","willChange","invertTop","invertLeft","isModifierRequired","requestingName","requestedName","requesting","isRequired","requested","querySelector","isVertical","len","altSide","opSide","arrowElementSize","center","sideValue","min","floor","getOppositeVariation","validPlacements","placements","clockwise","counter","index","concat","reverse","BEHAVIORS","flipped","placementOpposite","flipOrder","behavior","FLIP","CLOCKWISE","COUNTERCLOCKWISE","step","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariation","flipVariations","keepTogether","toValue","str","size","parseOffset","basePlacement","useHeight","fragments","frag","trim","divider","search","splitRegex","ops","op","mergeWithPrevious","reduce","index2","preventOverflow","priority","escapeWithReference","shift","shiftvariation","shiftOffsets","hide","bound","inner","subtractLength","Popper","requestAnimationFrame","debounce","bind","Defaults","jquery","onLoad","Utils","global","PopperUtils"],"mappings":"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"}